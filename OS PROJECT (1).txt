//Java program to implement Round Robin
// Scheduling with different arrival time
class roundrobin{
public static void roundRobin(String p[], int a[], int b[], int n)
{
// result of average times
int res = 0;

int resc = O;

// for sequence storage

String seq = new String();

// copy the burst array and arrival array for not effecting the actual array
int res_b[] = new int[b.|ength];

int res_a[] = new int[a.|ength];

for (int i = O; i < res_b.|ength; i++)

{
res_b[i] = b[i];

res_a[i] = a[i];

// critical time of system

intt=0;

// for store the waiting time

int w[] = new int[p.|ength];

// for store the Completion time

int comp[] = new int[p.|ength];

whi|e (true)
{
boolean flag = true;
for (int i = O; i < p.|ength; i++)

{

// these condition for if

// arrival is not on zero

// check that if there come before qtime
if (res_a[i] <= t)
{
if (res_a[i] <= n)
{
if (res_b[i] > O)
{
flag = false;
if (res_b[i] > n)

{

// make decrease the b time
t = t + n;

res_b[i] = res_b[i] - n;
res_a[i] = res_a[i] + n;

seq += "->" + p[i];

e|se{

// for last time

t = t + res_b[i];

// store comp time

comp[i] = t - a[i];

// store wait time
W[i] = t - b[i] - a[i];

res_b[i] = O;

// add sequence

seq += "->" + p[i];

}
else if(res_a[i] > n)

{

// is any have less arrival time
// the coming process then execute them

for (intj = 0; j < p.|ength; j++){

// compare
if (res_a[j] < re5_a[i])
{
if (res_b[j] > 0)
{
flag = false;

if (res_b[j] > n)

{
t = t + n;
res_b[i] = res_bLi] - n;
res_aLi] = res_a[i] + n;
seq += ‘->” + p[j];

}

e|se{
t= t+ res_b[j];
compij] = t- aLi];
WU] = t- b[]] - aLi];
res_b[j] = o;
seq += ‘->” + p[j];

}

// now the previous porcess according to ith is process
if (res_b[i] > O){

flag = false;

// Check for greaters

if (res_b[i] > n){
t = t + n;
res_b[i] = res_b[i] - n;
res_a[i] = res_a[i] + n;

seq += "->" + p[i];

e|se{

t = t + res_b[i];

comp[i] = t - a[i];

W[i] = t - b[i] - a[i];

res_b[i] = O;

seq += '

// if no process is come on thse critical

else if (res_a[i] > t){

}

// for exit the while loop

if (flag) {
break;

System.out.print|n("Process Name Completion Time
for (int i = O; i < p.|ength; i++){

System.out.println(" " + p[i] + "

res = res + w[i];

'->" + p[i];

Waiting Time");

"+comp[i] +"

resc = resc + comp[i];

System.out.print|n("Average waiting time is "+ (float)res / p.|ength);
System.out.print|n("Average compilation time is "+ (float)resc / p.|ength);

System.out.print|n("Sequence is like that " + seq);

// Driver Code
public static void main(String args[])
{

// name of the process

String name[] = { "pl", llpzll’ ”pa", np4n };

// arrival for every process

int arrivaltime[] = { 0,5,13,26 };

// burst time for every process

int bursttime[] = { 20,36,19,42 };

// quantum time of each process

int q = 10;

// cal the function for output

roundRobin(name, arrivaltime, bursttime, q);

